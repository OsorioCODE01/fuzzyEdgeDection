#!/usr/bin/env python3
"""
Script de configuraci√≥n y verificaci√≥n del entorno para el proyecto de Sudoku con L√≥gica Difusa.

Este script verifica que todas las dependencias est√©n instaladas correctamente y
proporciona una demostraci√≥n b√°sica de las funcionalidades principales.
"""

import sys
import subprocess
import importlib.util
from pathlib import Path

def check_python_version():
    """Verifica que la versi√≥n de Python sea compatible."""
    print("üêç Verificando versi√≥n de Python...")
    
    if sys.version_info < (3, 8):
        print("‚ùå Error: Se requiere Python 3.8 o superior.")
        print(f"   Versi√≥n actual: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    return True

def check_module(module_name, package_name=None):
    """Verifica si un m√≥dulo est√° instalado."""
    try:
        importlib.import_module(module_name)
        print(f"‚úÖ {package_name or module_name}")
        return True
    except ImportError:
        print(f"‚ùå {package_name or module_name} no est√° instalado")
        return False

def check_dependencies():
    """Verifica todas las dependencias requeridas."""
    print("\nüì¶ Verificando dependencias...")
    
    dependencies = [
        ("cv2", "opencv-python"),
        ("numpy", "numpy"),
        ("matplotlib", "matplotlib"),
        ("sklearn", "scikit-learn"),
    ]
    
    all_ok = True
    for module, package in dependencies:
        if not check_module(module, package):
            all_ok = False
    
    return all_ok

def check_project_files():
    """Verifica que los archivos del proyecto est√©n presentes."""
    print("\nüìÅ Verificando archivos del proyecto...")
    
    required_files = [
        "fuzzy_edge_detection.py",
        "fuzzy_sudoku_solver.py", 
        "tinyfuzzy.py",
        "requirements.txt"
    ]
    
    all_ok = True
    current_dir = Path(".")
    
    for file_name in required_files:
        file_path = current_dir / file_name
        if file_path.exists():
            print(f"‚úÖ {file_name}")
        else:
            print(f"‚ùå {file_name} no encontrado")
            all_ok = False
    
    return all_ok

def install_dependencies():
    """Instala las dependencias desde requirements.txt."""
    print("\nüîß Instalando dependencias...")
    
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ])
        print("‚úÖ Dependencias instaladas correctamente")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error al instalar dependencias: {e}")
        return False

def run_basic_test():
    """Ejecuta una prueba b√°sica de las funcionalidades."""
    print("\nüß™ Ejecutando prueba b√°sica...")
    
    try:
        # Importar m√≥dulos locales
        import tinyfuzzy
        import numpy as np
        
        # Prueba b√°sica del motor de l√≥gica difusa
        x = np.linspace(0, 10, 100)
        triangular = tinyfuzzy.trimf(x, 2, 5, 8)
        
        if len(triangular) == 100:
            print("‚úÖ Motor de l√≥gica difusa funcionando")
        else:
            print("‚ùå Problema con el motor de l√≥gica difusa")
            return False
        
        # Verificar OpenCV
        import cv2
        print(f"‚úÖ OpenCV versi√≥n {cv2.__version__}")
        
        # Verificar que las im√°genes de ejemplo existan
        if Path("peppers.png").exists():
            print("‚úÖ Imagen de ejemplo peppers.png encontrada")
        else:
            print("‚ö†Ô∏è  Imagen peppers.png no encontrada (opcional)")
        
        if Path("sudoku.jpg").exists():
            print("‚úÖ Imagen de ejemplo sudoku.jpg encontrada")
        else:
            print("‚ö†Ô∏è  Imagen sudoku.jpg no encontrada (opcional)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en la prueba b√°sica: {e}")
        return False

def main():
    """Funci√≥n principal del script de configuraci√≥n."""
    print("üöÄ Configuraci√≥n del Proyecto de Sudoku con L√≥gica Difusa")
    print("=" * 60)
    
    # Verificar Python
    if not check_python_version():
        print("\n‚ùå Configuraci√≥n fallida. Actualiza Python a versi√≥n 3.8+")
        return False
    
    # Verificar archivos del proyecto
    if not check_project_files():
        print("\n‚ùå Archivos del proyecto faltantes")
        return False
    
    # Verificar dependencias
    deps_ok = check_dependencies()
    
    if not deps_ok:
        print("\nüîß Instalando dependencias faltantes...")
        if not install_dependencies():
            print("\n‚ùå No se pudieron instalar las dependencias")
            return False
        
        # Verificar nuevamente despu√©s de la instalaci√≥n
        if not check_dependencies():
            print("\n‚ùå Algunas dependencias a√∫n faltan despu√©s de la instalaci√≥n")
            return False
    
    # Ejecutar prueba b√°sica
    if not run_basic_test():
        print("\n‚ùå Las pruebas b√°sicas fallaron")
        return False
    
    print("\n" + "=" * 60)
    print("üéâ ¬°Configuraci√≥n completada exitosamente!")
    print("\nEl proyecto est√° listo para usar. Puedes:")
    print("1. Ejecutar 'python fuzzy_edge_detection.py' para detecci√≥n de bordes")
    print("2. Ejecutar 'python fuzzy_sudoku_solver.py' para resolver Sudoku")
    print("3. Importar los m√≥dulos en tus propios scripts")
    print("\nConsulta el README.md para m√°s informaci√≥n.")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
